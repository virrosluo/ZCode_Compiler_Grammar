# Generated from d://antlr4//sample//Assignment1//src//main//zcode//parser//ZCode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,52,404,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,
        1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,
        1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,
        1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,
        1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,
        1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,
        1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,27,1,27,
        1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,32,1,32,
        1,32,1,32,1,33,1,33,1,33,1,34,4,34,253,8,34,11,34,12,34,254,1,34,
        5,34,258,8,34,10,34,12,34,261,9,34,1,35,1,35,1,36,1,36,1,37,1,37,
        1,38,1,38,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,
        1,41,1,41,1,42,1,42,1,43,1,43,1,43,1,43,1,43,3,43,291,8,43,1,43,
        1,43,3,43,295,8,43,1,44,4,44,298,8,44,11,44,12,44,299,1,45,1,45,
        5,45,304,8,45,10,45,12,45,307,9,45,1,46,1,46,3,46,311,8,46,1,46,
        4,46,314,8,46,11,46,12,46,315,1,47,1,47,1,47,1,47,1,47,1,47,5,47,
        324,8,47,10,47,12,47,327,9,47,1,47,1,47,1,47,1,48,3,48,333,8,48,
        1,48,1,48,1,48,1,49,4,49,339,8,49,11,49,12,49,340,1,49,1,49,1,50,
        1,50,1,50,1,50,5,50,349,8,50,10,50,12,50,352,9,50,1,50,1,50,1,51,
        1,51,1,51,1,51,1,51,1,51,5,51,362,8,51,10,51,12,51,365,9,51,1,51,
        1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,5,52,376,8,52,10,52,12,52,
        379,9,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,5,53,389,8,53,10,
        53,12,53,392,9,53,1,53,1,53,1,53,1,53,3,53,398,8,53,1,53,1,53,1,
        54,1,54,1,54,3,325,363,390,0,55,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
        19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
        30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,
        41,83,42,85,43,87,44,89,0,91,0,93,0,95,45,97,46,99,47,101,48,103,
        49,105,50,107,51,109,52,1,0,14,3,0,65,90,95,95,97,122,4,0,48,57,
        65,90,95,95,97,122,1,0,48,57,1,0,46,46,2,0,69,69,101,101,2,0,43,
        43,45,45,4,0,10,10,12,13,39,39,92,92,7,0,39,39,92,92,98,98,102,102,
        110,110,114,114,116,116,3,0,9,9,13,13,32,32,2,0,10,10,13,13,5,0,
        10,10,12,13,34,34,39,39,92,92,2,0,10,10,12,13,3,0,34,34,39,39,92,
        92,1,0,34,34,424,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
        0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
        0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
        0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
        0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,
        0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,
        0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,
        0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,
        0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,
        0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,
        0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,1,111,1,0,0,0,3,118,
        1,0,0,0,5,123,1,0,0,0,7,130,1,0,0,0,9,137,1,0,0,0,11,141,1,0,0,0,
        13,149,1,0,0,0,15,154,1,0,0,0,17,158,1,0,0,0,19,164,1,0,0,0,21,167,
        1,0,0,0,23,173,1,0,0,0,25,182,1,0,0,0,27,185,1,0,0,0,29,190,1,0,
        0,0,31,195,1,0,0,0,33,201,1,0,0,0,35,205,1,0,0,0,37,208,1,0,0,0,
        39,210,1,0,0,0,41,212,1,0,0,0,43,214,1,0,0,0,45,216,1,0,0,0,47,218,
        1,0,0,0,49,222,1,0,0,0,51,226,1,0,0,0,53,229,1,0,0,0,55,231,1,0,
        0,0,57,234,1,0,0,0,59,236,1,0,0,0,61,239,1,0,0,0,63,241,1,0,0,0,
        65,244,1,0,0,0,67,248,1,0,0,0,69,252,1,0,0,0,71,262,1,0,0,0,73,264,
        1,0,0,0,75,266,1,0,0,0,77,268,1,0,0,0,79,270,1,0,0,0,81,272,1,0,
        0,0,83,277,1,0,0,0,85,283,1,0,0,0,87,294,1,0,0,0,89,297,1,0,0,0,
        91,301,1,0,0,0,93,308,1,0,0,0,95,317,1,0,0,0,97,332,1,0,0,0,99,338,
        1,0,0,0,101,344,1,0,0,0,103,355,1,0,0,0,105,369,1,0,0,0,107,382,
        1,0,0,0,109,401,1,0,0,0,111,112,5,110,0,0,112,113,5,117,0,0,113,
        114,5,109,0,0,114,115,5,98,0,0,115,116,5,101,0,0,116,117,5,114,0,
        0,117,2,1,0,0,0,118,119,5,98,0,0,119,120,5,111,0,0,120,121,5,111,
        0,0,121,122,5,108,0,0,122,4,1,0,0,0,123,124,5,115,0,0,124,125,5,
        116,0,0,125,126,5,114,0,0,126,127,5,105,0,0,127,128,5,110,0,0,128,
        129,5,103,0,0,129,6,1,0,0,0,130,131,5,114,0,0,131,132,5,101,0,0,
        132,133,5,116,0,0,133,134,5,117,0,0,134,135,5,114,0,0,135,136,5,
        110,0,0,136,8,1,0,0,0,137,138,5,118,0,0,138,139,5,97,0,0,139,140,
        5,114,0,0,140,10,1,0,0,0,141,142,5,100,0,0,142,143,5,121,0,0,143,
        144,5,110,0,0,144,145,5,97,0,0,145,146,5,109,0,0,146,147,5,105,0,
        0,147,148,5,99,0,0,148,12,1,0,0,0,149,150,5,102,0,0,150,151,5,117,
        0,0,151,152,5,110,0,0,152,153,5,99,0,0,153,14,1,0,0,0,154,155,5,
        102,0,0,155,156,5,111,0,0,156,157,5,114,0,0,157,16,1,0,0,0,158,159,
        5,117,0,0,159,160,5,110,0,0,160,161,5,116,0,0,161,162,5,105,0,0,
        162,163,5,108,0,0,163,18,1,0,0,0,164,165,5,98,0,0,165,166,5,121,
        0,0,166,20,1,0,0,0,167,168,5,98,0,0,168,169,5,114,0,0,169,170,5,
        101,0,0,170,171,5,97,0,0,171,172,5,107,0,0,172,22,1,0,0,0,173,174,
        5,99,0,0,174,175,5,111,0,0,175,176,5,110,0,0,176,177,5,116,0,0,177,
        178,5,105,0,0,178,179,5,110,0,0,179,180,5,117,0,0,180,181,5,101,
        0,0,181,24,1,0,0,0,182,183,5,105,0,0,183,184,5,102,0,0,184,26,1,
        0,0,0,185,186,5,101,0,0,186,187,5,108,0,0,187,188,5,115,0,0,188,
        189,5,101,0,0,189,28,1,0,0,0,190,191,5,101,0,0,191,192,5,108,0,0,
        192,193,5,105,0,0,193,194,5,102,0,0,194,30,1,0,0,0,195,196,5,98,
        0,0,196,197,5,101,0,0,197,198,5,103,0,0,198,199,5,105,0,0,199,200,
        5,110,0,0,200,32,1,0,0,0,201,202,5,101,0,0,202,203,5,110,0,0,203,
        204,5,100,0,0,204,34,1,0,0,0,205,206,5,60,0,0,206,207,5,45,0,0,207,
        36,1,0,0,0,208,209,5,43,0,0,209,38,1,0,0,0,210,211,5,45,0,0,211,
        40,1,0,0,0,212,213,5,42,0,0,213,42,1,0,0,0,214,215,5,47,0,0,215,
        44,1,0,0,0,216,217,5,37,0,0,217,46,1,0,0,0,218,219,5,110,0,0,219,
        220,5,111,0,0,220,221,5,116,0,0,221,48,1,0,0,0,222,223,5,97,0,0,
        223,224,5,110,0,0,224,225,5,100,0,0,225,50,1,0,0,0,226,227,5,111,
        0,0,227,228,5,114,0,0,228,52,1,0,0,0,229,230,5,61,0,0,230,54,1,0,
        0,0,231,232,5,33,0,0,232,233,5,61,0,0,233,56,1,0,0,0,234,235,5,60,
        0,0,235,58,1,0,0,0,236,237,5,60,0,0,237,238,5,61,0,0,238,60,1,0,
        0,0,239,240,5,62,0,0,240,62,1,0,0,0,241,242,5,62,0,0,242,243,5,61,
        0,0,243,64,1,0,0,0,244,245,5,46,0,0,245,246,5,46,0,0,246,247,5,46,
        0,0,247,66,1,0,0,0,248,249,5,61,0,0,249,250,5,61,0,0,250,68,1,0,
        0,0,251,253,7,0,0,0,252,251,1,0,0,0,253,254,1,0,0,0,254,252,1,0,
        0,0,254,255,1,0,0,0,255,259,1,0,0,0,256,258,7,1,0,0,257,256,1,0,
        0,0,258,261,1,0,0,0,259,257,1,0,0,0,259,260,1,0,0,0,260,70,1,0,0,
        0,261,259,1,0,0,0,262,263,5,40,0,0,263,72,1,0,0,0,264,265,5,41,0,
        0,265,74,1,0,0,0,266,267,5,91,0,0,267,76,1,0,0,0,268,269,5,93,0,
        0,269,78,1,0,0,0,270,271,5,44,0,0,271,80,1,0,0,0,272,273,5,116,0,
        0,273,274,5,114,0,0,274,275,5,117,0,0,275,276,5,101,0,0,276,82,1,
        0,0,0,277,278,5,102,0,0,278,279,5,97,0,0,279,280,5,108,0,0,280,281,
        5,115,0,0,281,282,5,101,0,0,282,84,1,0,0,0,283,284,3,89,44,0,284,
        86,1,0,0,0,285,286,3,89,44,0,286,287,3,91,45,0,287,295,1,0,0,0,288,
        290,3,89,44,0,289,291,3,91,45,0,290,289,1,0,0,0,290,291,1,0,0,0,
        291,292,1,0,0,0,292,293,3,93,46,0,293,295,1,0,0,0,294,285,1,0,0,
        0,294,288,1,0,0,0,295,88,1,0,0,0,296,298,7,2,0,0,297,296,1,0,0,0,
        298,299,1,0,0,0,299,297,1,0,0,0,299,300,1,0,0,0,300,90,1,0,0,0,301,
        305,7,3,0,0,302,304,7,2,0,0,303,302,1,0,0,0,304,307,1,0,0,0,305,
        303,1,0,0,0,305,306,1,0,0,0,306,92,1,0,0,0,307,305,1,0,0,0,308,310,
        7,4,0,0,309,311,7,5,0,0,310,309,1,0,0,0,310,311,1,0,0,0,311,313,
        1,0,0,0,312,314,7,2,0,0,313,312,1,0,0,0,314,315,1,0,0,0,315,313,
        1,0,0,0,315,316,1,0,0,0,316,94,1,0,0,0,317,325,5,34,0,0,318,324,
        8,6,0,0,319,320,5,92,0,0,320,324,7,7,0,0,321,322,5,39,0,0,322,324,
        5,34,0,0,323,318,1,0,0,0,323,319,1,0,0,0,323,321,1,0,0,0,324,327,
        1,0,0,0,325,326,1,0,0,0,325,323,1,0,0,0,326,328,1,0,0,0,327,325,
        1,0,0,0,328,329,5,34,0,0,329,330,6,47,0,0,330,96,1,0,0,0,331,333,
        5,114,0,0,332,331,1,0,0,0,332,333,1,0,0,0,333,334,1,0,0,0,334,335,
        5,10,0,0,335,336,6,48,1,0,336,98,1,0,0,0,337,339,7,8,0,0,338,337,
        1,0,0,0,339,340,1,0,0,0,340,338,1,0,0,0,340,341,1,0,0,0,341,342,
        1,0,0,0,342,343,6,49,2,0,343,100,1,0,0,0,344,345,5,35,0,0,345,346,
        5,35,0,0,346,350,1,0,0,0,347,349,8,9,0,0,348,347,1,0,0,0,349,352,
        1,0,0,0,350,348,1,0,0,0,350,351,1,0,0,0,351,353,1,0,0,0,352,350,
        1,0,0,0,353,354,6,50,2,0,354,102,1,0,0,0,355,363,5,34,0,0,356,362,
        8,10,0,0,357,358,5,92,0,0,358,362,7,7,0,0,359,360,5,39,0,0,360,362,
        5,34,0,0,361,356,1,0,0,0,361,357,1,0,0,0,361,359,1,0,0,0,362,365,
        1,0,0,0,363,364,1,0,0,0,363,361,1,0,0,0,364,366,1,0,0,0,365,363,
        1,0,0,0,366,367,7,11,0,0,367,368,6,51,3,0,368,104,1,0,0,0,369,377,
        5,34,0,0,370,376,8,10,0,0,371,372,5,92,0,0,372,376,7,7,0,0,373,374,
        5,39,0,0,374,376,5,34,0,0,375,370,1,0,0,0,375,371,1,0,0,0,375,373,
        1,0,0,0,376,379,1,0,0,0,377,375,1,0,0,0,377,378,1,0,0,0,378,380,
        1,0,0,0,379,377,1,0,0,0,380,381,6,52,4,0,381,106,1,0,0,0,382,390,
        5,34,0,0,383,389,8,12,0,0,384,385,5,39,0,0,385,389,5,34,0,0,386,
        387,5,92,0,0,387,389,7,7,0,0,388,383,1,0,0,0,388,384,1,0,0,0,388,
        386,1,0,0,0,389,392,1,0,0,0,390,391,1,0,0,0,390,388,1,0,0,0,391,
        397,1,0,0,0,392,390,1,0,0,0,393,394,5,92,0,0,394,398,8,7,0,0,395,
        396,5,39,0,0,396,398,8,13,0,0,397,393,1,0,0,0,397,395,1,0,0,0,398,
        399,1,0,0,0,399,400,6,53,5,0,400,108,1,0,0,0,401,402,9,0,0,0,402,
        403,6,54,6,0,403,110,1,0,0,0,21,0,254,259,290,294,299,305,310,315,
        323,325,332,340,350,361,363,375,377,388,390,397,7,1,47,0,1,48,1,
        6,0,0,1,51,2,1,52,3,1,53,4,1,54,5
    ]

class ZCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    NUM_KEYWORD = 1
    BOOL_KEYWORD = 2
    STRING_KEYWORD = 3
    RETURN_KEYWORD = 4
    VAR_KEYWORD = 5
    DYNAMIC_KEYWORD = 6
    FUNC_KEYWORD = 7
    FOR_KEYWORD = 8
    UNTIL_KEYWORD = 9
    BY_KEYWORD = 10
    BREAK_KEYWORD = 11
    CONTINUE_KEYWORD = 12
    IF_KEYWORD = 13
    ELSE_KEYWORD = 14
    ELIF_KEYWORD = 15
    BEGIN_KEYWORD = 16
    END_KEYWORD = 17
    ASSIGN_OP = 18
    ADD_OP = 19
    SUB_OP = 20
    MUL_OP = 21
    DIV_OP = 22
    MOD_OP = 23
    NOT_OP = 24
    AND_OP = 25
    OR_OP = 26
    EQUAL_OP = 27
    INEQUAL_OP = 28
    LESS_OP = 29
    LESSEQUAL_OP = 30
    LARGE_OP = 31
    LARGEEQUAL_OP = 32
    CONCAT_OP = 33
    EQUAL_STR_OP = 34
    ID = 35
    LEFT_PARENTHESIS = 36
    RIGHT_PARENTHESIS = 37
    LEFT_BRACKET = 38
    RIGHT_BRACKET = 39
    SEPARATOR_KEYWORD = 40
    TRUE_LIT = 41
    FALSE_LIT = 42
    INT_LIT = 43
    REAL_LIT = 44
    STRING_LIT = 45
    NL = 46
    WS = 47
    COMMENT_LINE = 48
    NEWLINE_STRING = 49
    UNCLOSE_STRING = 50
    ILLEGAL_ESCAPE = 51
    ERROR_TOKEN = 52

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'number'", "'bool'", "'string'", "'return'", "'var'", "'dynamic'", 
            "'func'", "'for'", "'until'", "'by'", "'break'", "'continue'", 
            "'if'", "'else'", "'elif'", "'begin'", "'end'", "'<-'", "'+'", 
            "'-'", "'*'", "'/'", "'%'", "'not'", "'and'", "'or'", "'='", 
            "'!='", "'<'", "'<='", "'>'", "'>='", "'...'", "'=='", "'('", 
            "')'", "'['", "']'", "','", "'true'", "'false'" ]

    symbolicNames = [ "<INVALID>",
            "NUM_KEYWORD", "BOOL_KEYWORD", "STRING_KEYWORD", "RETURN_KEYWORD", 
            "VAR_KEYWORD", "DYNAMIC_KEYWORD", "FUNC_KEYWORD", "FOR_KEYWORD", 
            "UNTIL_KEYWORD", "BY_KEYWORD", "BREAK_KEYWORD", "CONTINUE_KEYWORD", 
            "IF_KEYWORD", "ELSE_KEYWORD", "ELIF_KEYWORD", "BEGIN_KEYWORD", 
            "END_KEYWORD", "ASSIGN_OP", "ADD_OP", "SUB_OP", "MUL_OP", "DIV_OP", 
            "MOD_OP", "NOT_OP", "AND_OP", "OR_OP", "EQUAL_OP", "INEQUAL_OP", 
            "LESS_OP", "LESSEQUAL_OP", "LARGE_OP", "LARGEEQUAL_OP", "CONCAT_OP", 
            "EQUAL_STR_OP", "ID", "LEFT_PARENTHESIS", "RIGHT_PARENTHESIS", 
            "LEFT_BRACKET", "RIGHT_BRACKET", "SEPARATOR_KEYWORD", "TRUE_LIT", 
            "FALSE_LIT", "INT_LIT", "REAL_LIT", "STRING_LIT", "NL", "WS", 
            "COMMENT_LINE", "NEWLINE_STRING", "UNCLOSE_STRING", "ILLEGAL_ESCAPE", 
            "ERROR_TOKEN" ]

    ruleNames = [ "NUM_KEYWORD", "BOOL_KEYWORD", "STRING_KEYWORD", "RETURN_KEYWORD", 
                  "VAR_KEYWORD", "DYNAMIC_KEYWORD", "FUNC_KEYWORD", "FOR_KEYWORD", 
                  "UNTIL_KEYWORD", "BY_KEYWORD", "BREAK_KEYWORD", "CONTINUE_KEYWORD", 
                  "IF_KEYWORD", "ELSE_KEYWORD", "ELIF_KEYWORD", "BEGIN_KEYWORD", 
                  "END_KEYWORD", "ASSIGN_OP", "ADD_OP", "SUB_OP", "MUL_OP", 
                  "DIV_OP", "MOD_OP", "NOT_OP", "AND_OP", "OR_OP", "EQUAL_OP", 
                  "INEQUAL_OP", "LESS_OP", "LESSEQUAL_OP", "LARGE_OP", "LARGEEQUAL_OP", 
                  "CONCAT_OP", "EQUAL_STR_OP", "ID", "LEFT_PARENTHESIS", 
                  "RIGHT_PARENTHESIS", "LEFT_BRACKET", "RIGHT_BRACKET", 
                  "SEPARATOR_KEYWORD", "TRUE_LIT", "FALSE_LIT", "INT_LIT", 
                  "REAL_LIT", "INTPART", "DECPART", "EXPPART", "STRING_LIT", 
                  "NL", "WS", "COMMENT_LINE", "NEWLINE_STRING", "UNCLOSE_STRING", 
                  "ILLEGAL_ESCAPE", "ERROR_TOKEN" ]

    grammarFileName = "ZCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[47] = self.STRING_LIT_action 
            actions[48] = self.NL_action 
            actions[51] = self.NEWLINE_STRING_action 
            actions[52] = self.UNCLOSE_STRING_action 
            actions[53] = self.ILLEGAL_ESCAPE_action 
            actions[54] = self.ERROR_TOKEN_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def STRING_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text = self.text[1:-1]
     

    def NL_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            self.text = self.text.replace('\r','')
     

    def NEWLINE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
            raise UncloseString(self.text[1:-1])
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            raise UncloseString(self.text[1:])
     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 4:
            raise IllegalEscape(self.text[1:])
     

    def ERROR_TOKEN_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 5:
            raise ErrorToken(self.text)
     


