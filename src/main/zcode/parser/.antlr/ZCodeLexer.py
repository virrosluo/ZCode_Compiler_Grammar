# Generated from d://antlr4//sample//Assignment1//src//main//zcode//parser//ZCode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,54,427,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,
        1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,
        1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,
        1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,
        1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,
        1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,31,
        1,31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,34,4,34,257,8,34,
        11,34,12,34,258,1,34,5,34,262,8,34,10,34,12,34,265,9,34,1,35,1,35,
        1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,40,1,40,1,40,
        1,41,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,3,42,
        294,8,42,1,42,1,42,3,42,298,8,42,1,43,4,43,301,8,43,11,43,12,43,
        302,1,44,1,44,5,44,307,8,44,10,44,12,44,310,9,44,1,45,1,45,3,45,
        314,8,45,1,45,4,45,317,8,45,11,45,12,45,318,1,46,1,46,1,46,1,46,
        1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,
        1,50,4,50,339,8,50,11,50,12,50,340,1,50,1,50,1,51,1,51,1,51,1,51,
        5,51,349,8,51,10,51,12,51,352,9,51,1,51,1,51,1,52,1,52,1,52,1,52,
        1,52,1,52,3,52,362,8,52,5,52,364,8,52,10,52,12,52,367,9,52,1,52,
        1,52,1,53,1,53,1,53,1,53,1,53,1,53,3,53,377,8,53,5,53,379,8,53,10,
        53,12,53,382,9,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,3,
        54,393,8,54,5,54,395,8,54,10,54,12,54,398,9,54,1,54,1,54,1,54,3,
        54,403,8,54,1,54,1,54,1,55,1,55,1,55,1,55,3,55,411,8,55,1,55,1,55,
        5,55,415,8,55,10,55,12,55,418,9,55,1,55,1,55,1,55,1,55,1,55,1,56,
        1,56,1,56,2,396,416,0,57,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
        19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
        41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
        63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,
        85,43,87,0,89,0,91,0,93,44,95,45,97,46,99,47,101,48,103,49,105,50,
        107,51,109,52,111,53,113,54,1,0,11,3,0,65,90,95,95,97,122,4,0,48,
        57,65,90,95,95,97,122,1,0,48,57,1,0,46,46,2,0,69,69,101,101,2,0,
        43,43,45,45,3,0,8,9,12,12,32,32,2,0,10,10,13,13,5,0,10,10,13,13,
        34,34,39,39,92,92,7,0,39,39,92,92,98,98,102,102,110,110,114,114,
        116,116,1,0,34,34,451,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,
        0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,
        0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
        0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,
        0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,
        0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,
        0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,
        0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,
        0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,93,1,
        0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,
        1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,
        0,113,1,0,0,0,1,115,1,0,0,0,3,122,1,0,0,0,5,127,1,0,0,0,7,134,1,
        0,0,0,9,141,1,0,0,0,11,145,1,0,0,0,13,153,1,0,0,0,15,158,1,0,0,0,
        17,162,1,0,0,0,19,168,1,0,0,0,21,171,1,0,0,0,23,177,1,0,0,0,25,186,
        1,0,0,0,27,189,1,0,0,0,29,194,1,0,0,0,31,199,1,0,0,0,33,205,1,0,
        0,0,35,209,1,0,0,0,37,212,1,0,0,0,39,214,1,0,0,0,41,216,1,0,0,0,
        43,218,1,0,0,0,45,220,1,0,0,0,47,222,1,0,0,0,49,226,1,0,0,0,51,230,
        1,0,0,0,53,233,1,0,0,0,55,235,1,0,0,0,57,238,1,0,0,0,59,240,1,0,
        0,0,61,243,1,0,0,0,63,245,1,0,0,0,65,248,1,0,0,0,67,252,1,0,0,0,
        69,256,1,0,0,0,71,266,1,0,0,0,73,268,1,0,0,0,75,270,1,0,0,0,77,272,
        1,0,0,0,79,274,1,0,0,0,81,276,1,0,0,0,83,281,1,0,0,0,85,297,1,0,
        0,0,87,300,1,0,0,0,89,304,1,0,0,0,91,311,1,0,0,0,93,320,1,0,0,0,
        95,326,1,0,0,0,97,329,1,0,0,0,99,334,1,0,0,0,101,338,1,0,0,0,103,
        344,1,0,0,0,105,355,1,0,0,0,107,370,1,0,0,0,109,386,1,0,0,0,111,
        406,1,0,0,0,113,424,1,0,0,0,115,116,5,110,0,0,116,117,5,117,0,0,
        117,118,5,109,0,0,118,119,5,98,0,0,119,120,5,101,0,0,120,121,5,114,
        0,0,121,2,1,0,0,0,122,123,5,98,0,0,123,124,5,111,0,0,124,125,5,111,
        0,0,125,126,5,108,0,0,126,4,1,0,0,0,127,128,5,115,0,0,128,129,5,
        116,0,0,129,130,5,114,0,0,130,131,5,105,0,0,131,132,5,110,0,0,132,
        133,5,103,0,0,133,6,1,0,0,0,134,135,5,114,0,0,135,136,5,101,0,0,
        136,137,5,116,0,0,137,138,5,117,0,0,138,139,5,114,0,0,139,140,5,
        110,0,0,140,8,1,0,0,0,141,142,5,118,0,0,142,143,5,97,0,0,143,144,
        5,114,0,0,144,10,1,0,0,0,145,146,5,100,0,0,146,147,5,121,0,0,147,
        148,5,110,0,0,148,149,5,97,0,0,149,150,5,109,0,0,150,151,5,105,0,
        0,151,152,5,99,0,0,152,12,1,0,0,0,153,154,5,102,0,0,154,155,5,117,
        0,0,155,156,5,110,0,0,156,157,5,99,0,0,157,14,1,0,0,0,158,159,5,
        102,0,0,159,160,5,111,0,0,160,161,5,114,0,0,161,16,1,0,0,0,162,163,
        5,117,0,0,163,164,5,110,0,0,164,165,5,116,0,0,165,166,5,105,0,0,
        166,167,5,108,0,0,167,18,1,0,0,0,168,169,5,98,0,0,169,170,5,121,
        0,0,170,20,1,0,0,0,171,172,5,98,0,0,172,173,5,114,0,0,173,174,5,
        101,0,0,174,175,5,97,0,0,175,176,5,107,0,0,176,22,1,0,0,0,177,178,
        5,99,0,0,178,179,5,111,0,0,179,180,5,110,0,0,180,181,5,116,0,0,181,
        182,5,105,0,0,182,183,5,110,0,0,183,184,5,117,0,0,184,185,5,101,
        0,0,185,24,1,0,0,0,186,187,5,105,0,0,187,188,5,102,0,0,188,26,1,
        0,0,0,189,190,5,101,0,0,190,191,5,108,0,0,191,192,5,115,0,0,192,
        193,5,101,0,0,193,28,1,0,0,0,194,195,5,101,0,0,195,196,5,108,0,0,
        196,197,5,105,0,0,197,198,5,102,0,0,198,30,1,0,0,0,199,200,5,98,
        0,0,200,201,5,101,0,0,201,202,5,103,0,0,202,203,5,105,0,0,203,204,
        5,110,0,0,204,32,1,0,0,0,205,206,5,101,0,0,206,207,5,110,0,0,207,
        208,5,100,0,0,208,34,1,0,0,0,209,210,5,60,0,0,210,211,5,45,0,0,211,
        36,1,0,0,0,212,213,5,43,0,0,213,38,1,0,0,0,214,215,5,45,0,0,215,
        40,1,0,0,0,216,217,5,42,0,0,217,42,1,0,0,0,218,219,5,47,0,0,219,
        44,1,0,0,0,220,221,5,37,0,0,221,46,1,0,0,0,222,223,5,110,0,0,223,
        224,5,111,0,0,224,225,5,116,0,0,225,48,1,0,0,0,226,227,5,97,0,0,
        227,228,5,110,0,0,228,229,5,100,0,0,229,50,1,0,0,0,230,231,5,111,
        0,0,231,232,5,114,0,0,232,52,1,0,0,0,233,234,5,61,0,0,234,54,1,0,
        0,0,235,236,5,33,0,0,236,237,5,61,0,0,237,56,1,0,0,0,238,239,5,60,
        0,0,239,58,1,0,0,0,240,241,5,60,0,0,241,242,5,61,0,0,242,60,1,0,
        0,0,243,244,5,62,0,0,244,62,1,0,0,0,245,246,5,62,0,0,246,247,5,61,
        0,0,247,64,1,0,0,0,248,249,5,46,0,0,249,250,5,46,0,0,250,251,5,46,
        0,0,251,66,1,0,0,0,252,253,5,61,0,0,253,254,5,61,0,0,254,68,1,0,
        0,0,255,257,7,0,0,0,256,255,1,0,0,0,257,258,1,0,0,0,258,256,1,0,
        0,0,258,259,1,0,0,0,259,263,1,0,0,0,260,262,7,1,0,0,261,260,1,0,
        0,0,262,265,1,0,0,0,263,261,1,0,0,0,263,264,1,0,0,0,264,70,1,0,0,
        0,265,263,1,0,0,0,266,267,5,40,0,0,267,72,1,0,0,0,268,269,5,41,0,
        0,269,74,1,0,0,0,270,271,5,91,0,0,271,76,1,0,0,0,272,273,5,93,0,
        0,273,78,1,0,0,0,274,275,5,44,0,0,275,80,1,0,0,0,276,277,5,116,0,
        0,277,278,5,114,0,0,278,279,5,117,0,0,279,280,5,101,0,0,280,82,1,
        0,0,0,281,282,5,102,0,0,282,283,5,97,0,0,283,284,5,108,0,0,284,285,
        5,115,0,0,285,286,5,101,0,0,286,84,1,0,0,0,287,298,3,87,43,0,288,
        289,3,87,43,0,289,290,3,89,44,0,290,298,1,0,0,0,291,293,3,87,43,
        0,292,294,3,89,44,0,293,292,1,0,0,0,293,294,1,0,0,0,294,295,1,0,
        0,0,295,296,3,91,45,0,296,298,1,0,0,0,297,287,1,0,0,0,297,288,1,
        0,0,0,297,291,1,0,0,0,298,86,1,0,0,0,299,301,7,2,0,0,300,299,1,0,
        0,0,301,302,1,0,0,0,302,300,1,0,0,0,302,303,1,0,0,0,303,88,1,0,0,
        0,304,308,7,3,0,0,305,307,7,2,0,0,306,305,1,0,0,0,307,310,1,0,0,
        0,308,306,1,0,0,0,308,309,1,0,0,0,309,90,1,0,0,0,310,308,1,0,0,0,
        311,313,7,4,0,0,312,314,7,5,0,0,313,312,1,0,0,0,313,314,1,0,0,0,
        314,316,1,0,0,0,315,317,7,2,0,0,316,315,1,0,0,0,317,318,1,0,0,0,
        318,316,1,0,0,0,318,319,1,0,0,0,319,92,1,0,0,0,320,321,5,13,0,0,
        321,322,5,13,0,0,322,323,5,10,0,0,323,324,1,0,0,0,324,325,6,46,0,
        0,325,94,1,0,0,0,326,327,5,13,0,0,327,328,6,47,1,0,328,96,1,0,0,
        0,329,330,5,13,0,0,330,331,5,10,0,0,331,332,1,0,0,0,332,333,6,48,
        2,0,333,98,1,0,0,0,334,335,5,10,0,0,335,336,6,49,3,0,336,100,1,0,
        0,0,337,339,7,6,0,0,338,337,1,0,0,0,339,340,1,0,0,0,340,338,1,0,
        0,0,340,341,1,0,0,0,341,342,1,0,0,0,342,343,6,50,4,0,343,102,1,0,
        0,0,344,345,5,35,0,0,345,346,5,35,0,0,346,350,1,0,0,0,347,349,8,
        7,0,0,348,347,1,0,0,0,349,352,1,0,0,0,350,348,1,0,0,0,350,351,1,
        0,0,0,351,353,1,0,0,0,352,350,1,0,0,0,353,354,6,51,4,0,354,104,1,
        0,0,0,355,365,5,34,0,0,356,364,8,8,0,0,357,358,5,92,0,0,358,364,
        7,9,0,0,359,361,5,39,0,0,360,362,7,10,0,0,361,360,1,0,0,0,361,362,
        1,0,0,0,362,364,1,0,0,0,363,356,1,0,0,0,363,357,1,0,0,0,363,359,
        1,0,0,0,364,367,1,0,0,0,365,363,1,0,0,0,365,366,1,0,0,0,366,368,
        1,0,0,0,367,365,1,0,0,0,368,369,6,52,5,0,369,106,1,0,0,0,370,380,
        5,34,0,0,371,379,8,8,0,0,372,373,5,92,0,0,373,379,7,9,0,0,374,376,
        5,39,0,0,375,377,7,10,0,0,376,375,1,0,0,0,376,377,1,0,0,0,377,379,
        1,0,0,0,378,371,1,0,0,0,378,372,1,0,0,0,378,374,1,0,0,0,379,382,
        1,0,0,0,380,378,1,0,0,0,380,381,1,0,0,0,381,383,1,0,0,0,382,380,
        1,0,0,0,383,384,5,34,0,0,384,385,6,53,6,0,385,108,1,0,0,0,386,396,
        5,34,0,0,387,395,8,8,0,0,388,389,5,92,0,0,389,395,7,9,0,0,390,392,
        5,39,0,0,391,393,7,10,0,0,392,391,1,0,0,0,392,393,1,0,0,0,393,395,
        1,0,0,0,394,387,1,0,0,0,394,388,1,0,0,0,394,390,1,0,0,0,395,398,
        1,0,0,0,396,397,1,0,0,0,396,394,1,0,0,0,397,402,1,0,0,0,398,396,
        1,0,0,0,399,400,5,13,0,0,400,403,5,10,0,0,401,403,7,7,0,0,402,399,
        1,0,0,0,402,401,1,0,0,0,403,404,1,0,0,0,404,405,6,54,7,0,405,110,
        1,0,0,0,406,416,5,34,0,0,407,415,8,8,0,0,408,410,5,39,0,0,409,411,
        7,10,0,0,410,409,1,0,0,0,410,411,1,0,0,0,411,415,1,0,0,0,412,413,
        5,92,0,0,413,415,7,9,0,0,414,407,1,0,0,0,414,408,1,0,0,0,414,412,
        1,0,0,0,415,418,1,0,0,0,416,417,1,0,0,0,416,414,1,0,0,0,417,419,
        1,0,0,0,418,416,1,0,0,0,419,420,5,92,0,0,420,421,8,9,0,0,421,422,
        1,0,0,0,422,423,6,55,8,0,423,112,1,0,0,0,424,425,9,0,0,0,425,426,
        6,56,9,0,426,114,1,0,0,0,24,0,258,263,293,297,302,308,313,318,340,
        350,361,363,365,376,378,380,392,394,396,402,410,414,416,10,1,46,
        0,1,47,1,1,48,2,1,49,3,6,0,0,1,52,4,1,53,5,1,54,6,1,55,7,1,56,8
    ]

class ZCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    NUM_KEYWORD = 1
    BOOL_KEYWORD = 2
    STRING_KEYWORD = 3
    RETURN_KEYWORD = 4
    VAR_KEYWORD = 5
    DYNAMIC_KEYWORD = 6
    FUNC_KEYWORD = 7
    FOR_KEYWORD = 8
    UNTIL_KEYWORD = 9
    BY_KEYWORD = 10
    BREAK_KEYWORD = 11
    CONTINUE_KEYWORD = 12
    IF_KEYWORD = 13
    ELSE_KEYWORD = 14
    ELIF_KEYWORD = 15
    BEGIN_KEYWORD = 16
    END_KEYWORD = 17
    ASSIGN_OP = 18
    ADD_OP = 19
    SUB_OP = 20
    MUL_OP = 21
    DIV_OP = 22
    MOD_OP = 23
    NOT_OP = 24
    AND_OP = 25
    OR_OP = 26
    EQUAL_OP = 27
    INEQUAL_OP = 28
    LESS_OP = 29
    LESSEQUAL_OP = 30
    LARGE_OP = 31
    LARGEEQUAL_OP = 32
    CONCAT_OP = 33
    EQUAL_STR_OP = 34
    ID = 35
    LEFT_PARENTHESIS = 36
    RIGHT_PARENTHESIS = 37
    LEFT_BRACKET = 38
    RIGHT_BRACKET = 39
    SEPARATOR_KEYWORD = 40
    TRUE_LIT = 41
    FALSE_LIT = 42
    REAL_LIT = 43
    NL1 = 44
    NL2 = 45
    NL3 = 46
    NL4 = 47
    WS = 48
    COMMENT_LINE = 49
    UNCLOSE_STRING = 50
    STRING_LIT = 51
    NEWLINE_STRING = 52
    ILLEGAL_ESCAPE = 53
    ERROR_TOKEN = 54

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'number'", "'bool'", "'string'", "'return'", "'var'", "'dynamic'", 
            "'func'", "'for'", "'until'", "'by'", "'break'", "'continue'", 
            "'if'", "'else'", "'elif'", "'begin'", "'end'", "'<-'", "'+'", 
            "'-'", "'*'", "'/'", "'%'", "'not'", "'and'", "'or'", "'='", 
            "'!='", "'<'", "'<='", "'>'", "'>='", "'...'", "'=='", "'('", 
            "')'", "'['", "']'", "','", "'true'", "'false'", "'\\r\\r\\n'", 
            "'\\r'", "'\\r\\n'", "'\\n'" ]

    symbolicNames = [ "<INVALID>",
            "NUM_KEYWORD", "BOOL_KEYWORD", "STRING_KEYWORD", "RETURN_KEYWORD", 
            "VAR_KEYWORD", "DYNAMIC_KEYWORD", "FUNC_KEYWORD", "FOR_KEYWORD", 
            "UNTIL_KEYWORD", "BY_KEYWORD", "BREAK_KEYWORD", "CONTINUE_KEYWORD", 
            "IF_KEYWORD", "ELSE_KEYWORD", "ELIF_KEYWORD", "BEGIN_KEYWORD", 
            "END_KEYWORD", "ASSIGN_OP", "ADD_OP", "SUB_OP", "MUL_OP", "DIV_OP", 
            "MOD_OP", "NOT_OP", "AND_OP", "OR_OP", "EQUAL_OP", "INEQUAL_OP", 
            "LESS_OP", "LESSEQUAL_OP", "LARGE_OP", "LARGEEQUAL_OP", "CONCAT_OP", 
            "EQUAL_STR_OP", "ID", "LEFT_PARENTHESIS", "RIGHT_PARENTHESIS", 
            "LEFT_BRACKET", "RIGHT_BRACKET", "SEPARATOR_KEYWORD", "TRUE_LIT", 
            "FALSE_LIT", "REAL_LIT", "NL1", "NL2", "NL3", "NL4", "WS", "COMMENT_LINE", 
            "UNCLOSE_STRING", "STRING_LIT", "NEWLINE_STRING", "ILLEGAL_ESCAPE", 
            "ERROR_TOKEN" ]

    ruleNames = [ "NUM_KEYWORD", "BOOL_KEYWORD", "STRING_KEYWORD", "RETURN_KEYWORD", 
                  "VAR_KEYWORD", "DYNAMIC_KEYWORD", "FUNC_KEYWORD", "FOR_KEYWORD", 
                  "UNTIL_KEYWORD", "BY_KEYWORD", "BREAK_KEYWORD", "CONTINUE_KEYWORD", 
                  "IF_KEYWORD", "ELSE_KEYWORD", "ELIF_KEYWORD", "BEGIN_KEYWORD", 
                  "END_KEYWORD", "ASSIGN_OP", "ADD_OP", "SUB_OP", "MUL_OP", 
                  "DIV_OP", "MOD_OP", "NOT_OP", "AND_OP", "OR_OP", "EQUAL_OP", 
                  "INEQUAL_OP", "LESS_OP", "LESSEQUAL_OP", "LARGE_OP", "LARGEEQUAL_OP", 
                  "CONCAT_OP", "EQUAL_STR_OP", "ID", "LEFT_PARENTHESIS", 
                  "RIGHT_PARENTHESIS", "LEFT_BRACKET", "RIGHT_BRACKET", 
                  "SEPARATOR_KEYWORD", "TRUE_LIT", "FALSE_LIT", "REAL_LIT", 
                  "INTPART", "DECPART", "EXPPART", "NL1", "NL2", "NL3", 
                  "NL4", "WS", "COMMENT_LINE", "UNCLOSE_STRING", "STRING_LIT", 
                  "NEWLINE_STRING", "ILLEGAL_ESCAPE", "ERROR_TOKEN" ]

    grammarFileName = "ZCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[46] = self.NL1_action 
            actions[47] = self.NL2_action 
            actions[48] = self.NL3_action 
            actions[49] = self.NL4_action 
            actions[52] = self.UNCLOSE_STRING_action 
            actions[53] = self.STRING_LIT_action 
            actions[54] = self.NEWLINE_STRING_action 
            actions[55] = self.ILLEGAL_ESCAPE_action 
            actions[56] = self.ERROR_TOKEN_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def NL1_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text = "\n"
     

    def NL2_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            self.text = "\n"
     

    def NL3_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
            self.text = "\n"
     

    def NL4_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            self.text = "\n"
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 4:
            raise UncloseString(self.text[1:])
     

    def STRING_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 5:
            self.text = self.text[1:-1]
     

    def NEWLINE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 6:
            raise UncloseString(self.text[1:].replace('\r', '').replace('\n',''))
     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 7:
            raise IllegalEscape(self.text[1:])
     

    def ERROR_TOKEN_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 8:
            raise ErrorToken(self.text)
     


